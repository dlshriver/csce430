package csce430;

import java.util.*;
import java.io.*;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Assembler {

	public static void main(String args[]) throws FileNotFoundException{
		HashMap <String, String> hexOp = new HashMap<String, String>();
		hexOp.put("add", "A");
		hexOp.put("sub", "A");
		hexOp.put("and", "A");
		hexOp.put("or", "A");
		hexOp.put("xor", "A");
		hexOp.put("sll", "B");
		hexOp.put("cmp", "E");
		hexOp.put("jr", "F");
		hexOp.put("lw", "8");
		hexOp.put("sw", "9");
		hexOp.put("addi", "C");
		hexOp.put("b", "0");
		hexOp.put("bal", "4");
		hexOp.put("j", "2");
		hexOp.put("jal", "6");
		hexOp.put("li", "3");
		
		HashMap <String, String> hexCond = new HashMap<String, String>();
		hexCond.put("EQ", "0");
		hexCond.put("NE", "1");
		hexCond.put("CS", "2");
		hexCond.put("CC", "3");
		hexCond.put("MI", "4");
		hexCond.put("PL", "5");
		hexCond.put("VS", "6");
		hexCond.put("VC", "7");
		hexCond.put("HI", "8");
		hexCond.put("LS", "9");
		hexCond.put("GE", "A");
		hexCond.put("LT", "B");
		hexCond.put("GT", "C");
		hexCond.put("LE", "D");
		hexCond.put("AL", "E");
		hexCond.put("NV", "F");
		
		HashMap<String, String> hexOpx = new HashMap<String, String>();
		hexOpx.put("add", "4");
		hexOpx.put("sub", "0");
		hexOpx.put("and", "2");
		hexOpx.put("or", "3");
		hexOpx.put("xor", "1");
		hexOpx.put("sll", "0");
		hexOpx.put("cmp", "0");
		hexOpx.put("jr", "0");
		
		Scanner s = null;
		
		try{
			s = new Scanner(new File("data/assembly.txt"));
		}catch (FileNotFoundException e){
			e.printStackTrace();
		}
		
		File output = new File("data/project.mif");
		FileOutputStream fis = new FileOutputStream(output);
		PrintStream out = new PrintStream(fis);
		System.setOut(out);
		
		int width = 24;
		int depth = 256;
		
		System.out.printf("WIDTH = %d;\nDEPTH = %d;\nADDRESS_RADIX = HEX;\nDATA_RADIX = HEX;\nCONTENT BEGIN\n", width, depth);
		
		String assemblyInstruct = "";
		
		String[] tokens;
		
		String op = "";
		String cond = "";
		String rs = "";
		String rt = "";
		String rd = "";
		String opx = "";
		String set = "";
		String imm = "";
		String label = "";
		
		int numInstr = 0;
		
		
		while(s.hasNextLine()){
			assemblyInstruct = s.nextLine();
			tokens = assemblyInstruct.split(" ");
			String hexInstruct = "";
			
			//R-Type
			if(tokens[0].equals("add")||tokens[0].equals("sub")||tokens[0].equals("and")||tokens[0].equals("or")||tokens[0].equals("xor")||tokens[0].equals("sll")||tokens[0].equals("cmp")||tokens[0].equals("jr")){
				op = hexOp.get(tokens[0]);
				opx = hexOpx.get(tokens[0]);
				if(tokens[0].equals("cmp")){
					if(!tokens[1].contains("r")){
						cond = hexCond.get(tokens[1]);
						rs = tokens[2].replace("r", "");
						rt = tokens[3].replace("r", "");
						rd= "0";
						if(tokens.length == 5){
							set = "1";
						}else{
							set = "0";
						}
					}else{
						cond = hexCond.get("AL");
						rs = tokens[1].replace("r", "");
						rt = tokens[2].replace("r", "");
						rd = "0";
						if(tokens.length == 4){
							set = "1";
						}else{
							set = "0";
						}
					}
				}else if(tokens[0].equals("jr")){
					if(!tokens[1].contains("r")){
						cond = hexCond.get(tokens[1]);
						rs = tokens[2].replace("r", "");
						rt = "0";
						rd = "0";
						if(tokens.length == 4){
							set = "1";
						}else{
							set = "0";
						}
					}else{
						cond = hexCond.get("AL");
						rs = tokens[1].replace("r", "");
						rt = "0";
						rd = "0";
						if(tokens.length == 3){
							set = "1";
						}else{
							set = "0";
						}
					}
				}else{
					if(!tokens[1].contains("r")){
						cond = hexCond.get(tokens[1]);
						rs = tokens[2].replace("r", "");
						rt = tokens[3].replace("r", "");
						rd = tokens[4].replace("r", "");
						if(tokens.length == 6){
							set = "1";
						}else{
							set = "0";
						}
					}else{
						cond = hexCond.get("AL");
						rs = tokens[1].replace("r", "");
						rt = tokens[2].replace("r", "");
						rd = tokens[3].replace("r", "");
						if(tokens.length == 5){
							set = "1";
						}else{
							set = "0";
						}
					}
				}
					imm = "";
					label = "";
					
					//TODO: correct opx to account for if the set bit is set
					hexInstruct = op+cond+rs+rt+rd+opx;
					
			//D-Type
			}else if(tokens[0].equals("lw")||tokens[0].equals("sw")||tokens[0].equals("addi")){
				op = hexOp.get(tokens[0]);
				if(!tokens[1].contains("r")){
					cond = hexCond.get(tokens[1]);
					rs = tokens[2].replace("r", "");
					rt = tokens[3].replace("r", "");
					imm = tokens[4];
					if(tokens.length == 6){
						set = "1";
					}else{
						set = "0";
					}
				}else{
					cond = hexCond.get("AL");
					rs = tokens[1].replace("r", "");
					rt = tokens[2].replace("r", "");
					imm = tokens[3];
					if(tokens.length == 5){
						set = "1";
					}else{
						set = "0";
					}
				}
				rd = "";
				opx = "";
				label = "";
				
				//TODO: correct imm to account for if the set bit is set
				hexInstruct = op+cond+rs+rt+imm;
			
			//B-Type
			}else if(tokens[0].equals("b")||tokens[0].equals("bal")){
				op = hexOp.get(tokens[0]);
				if(!tokens[1].contains("r")){
					cond = hexCond.get(tokens[1]);
					label = tokens[2];
				}else{
					cond = hexCond.get("AL");
					label = tokens[1];
				}
				rs = "";
				rt = "";
				rd = "";
				opx = "";
				set = "";
				imm = "";
				
				hexInstruct = op+cond+label;
	
			}else{
				//TODO: Handle when a Tag is put in
			}
			
			System.out.printf("%0x : %s;\n", numInstr, hexInstruct);

			numInstr++;
		}
		System.out.println("END;");
	}
}
