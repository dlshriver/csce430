# Reading C:/altera/10.0/modelsim_ase/tcl/vsim/pref.tcl 
# do Project_run_msim_gate_vhdl.do 
# if {[file exists gate_work]} {
# 	vdel -lib gate_work -all
# }
# vlib gate_work
# vmap work gate_work
# Copying C:\altera\10.0\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# ** Warning: Copied C:\altera\10.0\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini.
#          Updated modelsim.ini.
# 
# vcom -93 -work work {Project.vho}
# Model Technology ModelSim ALTERA vcom 6.5e Compiler 2010.02 Feb 27 2010
# -- Loading package standard
# -- Loading package std_logic_1164
# -- Loading package vital_timing
# -- Loading package vital_primitives
# -- Loading package cycloneii_atom_pack
# -- Loading package cycloneii_components
# -- Compiling entity processor
# -- Compiling architecture structure of processor
# 
# do "C:/Users/dshriver/Documents/Github/csce430/project_pipelined/part1.do"
# vsim processor
# vsim processor 
# Loading std.standard
# Loading ieee.std_logic_1164(body)
# Loading std.textio(body)
# Loading ieee.vital_timing(body)
# Loading ieee.vital_primitives(body)
# Loading cycloneii.cycloneii_atom_pack(body)
# Loading cycloneii.cycloneii_components
# Loading work.processor(structure)
# Loading cycloneii.cycloneii_lcell_ff(vital_lcell_ff)
# Loading cycloneii.cycloneii_and1(altvital)
# Loading cycloneii.cycloneii_lcell_comb(vital_lcell_comb)
# Loading ieee.std_logic_arith(body)
# Loading cycloneii.cycloneii_io(structure)
# Loading cycloneii.cycloneii_mux21(altvital)
# Loading cycloneii.cycloneii_dffe(behave)
# Loading cycloneii.cycloneii_asynch_io(behave)
# Loading cycloneii.cycloneii_clkctrl(vital_clkctrl)
# Loading cycloneii.cycloneii_ena_reg(behave)
# Loading cycloneii.cycloneii_ram_block(block_arch)
# Loading cycloneii.cycloneii_ram_register(reg_arch)
# Loading cycloneii.cycloneii_ram_pulse_generator(pgen_arch)
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# add wave clock
# add wave reset
# add wave -radix hex memout
# add wave -radix hex PC_instr_addr
# add wave -radix hex IR
# add wave -radix hex IRexe
# add wave -radix hex IRmem
#add wave -radix hex alu_out_mem
#add wave -radix hex regD
# add wave r1
# add wave r2
# add wave r3
# add wave r4
# add wave r5
# add wave r8
# add wave r9
# add wave r15
#add wave hex0
#add wave sw
# add wave key
#add wave ledg
# add wave n_val
# add wave v_val
# add wave c_val
# add wave z_val
#add wave z_out
#add wave flag_enable_exe
# add wave execute
# add wave mem_addr
# add wave mem_write_mem
# add wave mem_data
# add wave forwardB
# add wave LEDG
#add wave ID_reset
#add wave execute
#add wave flush
#add wave deassert
# add wave muxymem
#add wave yselect_mem
#add wave yselect
# add wave WBreg
#add wave op_code
#add wave cond
#add wave opx
# add wave pc_select
# add wave br_exe
# add wave jmp_exe
# add wave br_addr
# 
# force key 1111 0, 0111 500 -repeat 1000
# force sw 0000000000 0, 0000000001 500000, 0000000000 1000000
# force clock 0 0, 1 30 -repeat 60
# 
# run 100000
do Project_run_msim_gate_vhdl.do
# if {[file exists gate_work]} {
# 	vdel -lib gate_work -all
# }
# vlib gate_work
# vmap work gate_work
# Modifying modelsim.ini
# 
# vcom -93 -work work {Project.vho}
# Model Technology ModelSim ALTERA vcom 6.5e Compiler 2010.02 Feb 27 2010
# -- Loading package standard
# -- Loading package std_logic_1164
# -- Loading package vital_timing
# -- Loading package vital_primitives
# -- Loading package cycloneii_atom_pack
# -- Loading package cycloneii_components
# -- Compiling entity processor
# -- Compiling architecture structure of processor
# 
# do "C:/Users/dshriver/Documents/Github/csce430/project_pipelined/part1.do"
# vsim processor
# vsim processor 
# Loading std.standard
# Loading ieee.std_logic_1164(body)
# Loading std.textio(body)
# Loading ieee.vital_timing(body)
# Loading ieee.vital_primitives(body)
# Loading cycloneii.cycloneii_atom_pack(body)
# Loading cycloneii.cycloneii_components
# Loading work.processor(structure)
# Loading cycloneii.cycloneii_lcell_ff(vital_lcell_ff)
# Loading cycloneii.cycloneii_and1(altvital)
# Loading cycloneii.cycloneii_lcell_comb(vital_lcell_comb)
# Loading ieee.std_logic_arith(body)
# Loading cycloneii.cycloneii_io(structure)
# Loading cycloneii.cycloneii_mux21(altvital)
# Loading cycloneii.cycloneii_dffe(behave)
# Loading cycloneii.cycloneii_asynch_io(behave)
# Loading cycloneii.cycloneii_clkctrl(vital_clkctrl)
# Loading cycloneii.cycloneii_ena_reg(behave)
# Loading cycloneii.cycloneii_ram_block(block_arch)
# Loading cycloneii.cycloneii_ram_register(reg_arch)
# Loading cycloneii.cycloneii_ram_pulse_generator(pgen_arch)
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# add wave clock
# add wave reset
# add wave -radix hex memout
# add wave -radix hex PC_instr_addr
# add wave -radix hex IR
# add wave -radix hex IRexe
# add wave -radix hex IRmem
#add wave -radix hex alu_out_mem
#add wave -radix hex regD
# add wave r1
# add wave r2
# add wave r3
# add wave r4
# add wave r5
# add wave r8
# add wave r9
# add wave r15
#add wave hex0
#add wave sw
# add wave key
#add wave ledg
# add wave n_val
# add wave v_val
# add wave c_val
# add wave z_val
#add wave z_out
#add wave flag_enable_exe
# add wave execute
# add wave mem_addr
# add wave mem_write_mem
# add wave mem_data
# add wave forwardB
# add wave LEDG
#add wave ID_reset
#add wave execute
#add wave flush
#add wave deassert
# add wave muxymem
#add wave yselect_mem
#add wave yselect
# add wave WBreg
#add wave op_code
#add wave cond
#add wave opx
# add wave pc_select
# add wave br_exe
# add wave jmp_exe
# add wave br_addr
# 
# force key 1111 0, 0111 500 -repeat 1000
# force sw 0000000000 0, 0000000001 500000, 0000000000 1000000
# force clock 0 0, 1 30 -repeat 60
# 
# run 100000
do Project_run_msim_gate_vhdl.do
# if {[file exists gate_work]} {
# 	vdel -lib gate_work -all
# }
# vlib gate_work
# vmap work gate_work
# Modifying modelsim.ini
# 
# vcom -93 -work work {Project.vho}
# Model Technology ModelSim ALTERA vcom 6.5e Compiler 2010.02 Feb 27 2010
# -- Loading package standard
# -- Loading package std_logic_1164
# -- Loading package vital_timing
# -- Loading package vital_primitives
# -- Loading package cycloneii_atom_pack
# -- Loading package cycloneii_components
# -- Compiling entity processor
# -- Compiling architecture structure of processor
# 
# do "C:/Users/dshriver/Documents/Github/csce430/project_pipelined/part1.do"
# vsim processor
# vsim processor 
# Loading std.standard
# Loading ieee.std_logic_1164(body)
# Loading std.textio(body)
# Loading ieee.vital_timing(body)
# Loading ieee.vital_primitives(body)
# Loading cycloneii.cycloneii_atom_pack(body)
# Loading cycloneii.cycloneii_components
# Loading work.processor(structure)
# Loading cycloneii.cycloneii_lcell_ff(vital_lcell_ff)
# Loading cycloneii.cycloneii_and1(altvital)
# Loading cycloneii.cycloneii_lcell_comb(vital_lcell_comb)
# Loading ieee.std_logic_arith(body)
# Loading cycloneii.cycloneii_io(structure)
# Loading cycloneii.cycloneii_mux21(altvital)
# Loading cycloneii.cycloneii_dffe(behave)
# Loading cycloneii.cycloneii_asynch_io(behave)
# Loading cycloneii.cycloneii_clkctrl(vital_clkctrl)
# Loading cycloneii.cycloneii_ena_reg(behave)
# Loading cycloneii.cycloneii_ram_block(block_arch)
# Loading cycloneii.cycloneii_ram_register(reg_arch)
# Loading cycloneii.cycloneii_ram_pulse_generator(pgen_arch)
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# add wave clock
# add wave reset
# add wave -radix hex memout
# add wave -radix hex PC_instr_addr
# add wave -radix hex IR
# add wave -radix hex IRexe
# add wave -radix hex IRmem
#add wave -radix hex alu_out_mem
#add wave -radix hex regD
# add wave r1
# add wave r2
# add wave r3
# add wave r4
# add wave r5
# add wave r8
# add wave r9
# add wave r15
#add wave hex0
#add wave sw
# add wave key
#add wave ledg
# add wave n_val
# add wave v_val
# add wave c_val
# add wave z_val
#add wave z_out
#add wave flag_enable_exe
# add wave execute
# add wave mem_addr
# add wave mem_write_mem
# add wave mem_data
# add wave forwardB
# add wave LEDG
#add wave ID_reset
#add wave execute
#add wave flush
#add wave deassert
# add wave muxymem
#add wave yselect_mem
#add wave yselect
# add wave WBreg
#add wave op_code
#add wave cond
#add wave opx
# add wave pc_select
# add wave br_exe
# add wave jmp_exe
# add wave br_addr
# 
# force key 1111 0, 0111 500 -repeat 1000
# force sw 0000000000 0, 0000000001 500000, 0000000000 1000000
# force clock 0 0, 1 30 -repeat 60
# 
# run 100000
